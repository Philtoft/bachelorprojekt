[
    {
        "context": "How to build UI interface: A layout defines the structure of the UI of an app such as in an activity. All elements in a layout are build using a hierarchy of View and ViewGroup objects. View: draws something on the screen \u2192 Buttons, Text, Image. ViewGroup: invisible container that defines the structure for views and other ViewGroups \u2192 LinearLayout, ConstraintLayout. Two ways of building UI\u2019s. Declare UI elements in XML. Instantiate layout elements at runtime. Each layout must have a root element. Loading XML resources. When app compiles \u2192 each XML layout is compiled into a View resource.",
        "questions_answers": [
            {
                "question": "How to build UI interface: A layout defines the structure of the UI of an app such as in an activity?",
                "answer": {
                    "score": 0.04262981563806534,
                    "start": 167,
                    "end": 184,
                    "answer": "ViewGroup objects"
                }
            },
            {
                "question": "What is a hierarchy of View and ViewGroup objects built in a layout?",
                "answer": {
                    "score": 0.8836838603019714,
                    "start": 13,
                    "end": 25,
                    "answer": "UI interface"
                }
            },
            {
                "question": "How many ways of building UI\u2019s are used to define UI elements in XML?",
                "answer": {
                    "score": 0.8201983571052551,
                    "start": 369,
                    "end": 372,
                    "answer": "Two"
                }
            }
        ]
    },
    {
        "context": "The layout of each activity should be loaded on the onCreate() lifecycle event in the setContentView() method \ud83d\udd0d. Attributes. UI elements\u2019s design are defined through attributes which are key-value properties. Each View object can have an integer \u2192 but doesn\u2019t have to. Each element can be found through their ID in the Activity class through the findViewById method. There are two ways you can build UI interfaces for android app. The primary way is through building the XML files in the resources folder. Here you can define what elements shall be contained within the distinct files that can represent Activities and also Fragments.",
        "questions_answers": [
            {
                "question": "What does the layout of each activity should be loaded on in the setContentView() method?",
                "answer": {
                    "score": 0.39200612902641296,
                    "start": 52,
                    "end": 78,
                    "answer": "onCreate() lifecycle event"
                }
            },
            {
                "question": "What are attributes that are key-value properties?",
                "answer": {
                    "score": 0.9696078300476074,
                    "start": 125,
                    "end": 145,
                    "answer": "UI elements\u2019s design"
                }
            },
            {
                "question": "How can each View object be found through their ID in the Activity class?",
                "answer": {
                    "score": 0.683721125125885,
                    "start": 346,
                    "end": 365,
                    "answer": "findViewById method"
                }
            },
            {
                "question": "What is the primary way you can build UI interfaces for android app?",
                "answer": {
                    "score": 0.7254603505134583,
                    "start": 458,
                    "end": 504,
                    "answer": "building the XML files in the resources folder"
                }
            }
        ]
    },
    {
        "context": "If there\u2019s a TextField the content of the input field can be defined in the strings.xml file inside resources, where the value is defined and thus standardized instead of containing it in each activity and fragment file. Lifecycle of app: The Activity component of an app which displays a UI has different lifecycle methods. These methods can be overwritten and thus we can modify their behaviour and trigger our own custom methods as needed. Lifecycle of Android Activity. onCreate(). onStart(). onResume(). App is running with activity shown. onPause(). onStop(). onDestroy(). Fragments are resusable portions of an app\u2019s UI.",
        "questions_answers": [
            {
                "question": "What is the content of the input field defined in the strings.xml file inside resources?",
                "answer": {
                    "score": 0.24780404567718506,
                    "start": 121,
                    "end": 126,
                    "answer": "value"
                }
            },
            {
                "question": "What does the Activity component of an app display a UI have different lifecycle methods?",
                "answer": {
                    "score": 0.7178978323936462,
                    "start": 579,
                    "end": 588,
                    "answer": "Fragments"
                }
            },
            {
                "question": "How can we modify their behaviour and trigger our own custom methods as needed?",
                "answer": {
                    "score": 0.7651021480560303,
                    "start": 346,
                    "end": 357,
                    "answer": "overwritten"
                }
            },
            {
                "question": "When is an app running with activity shown?",
                "answer": {
                    "score": 0.17927594482898712,
                    "start": 497,
                    "end": 505,
                    "answer": "onResume"
                }
            }
        ]
    },
    {
        "context": "A fragment defines and manages its own layout and has its own lifecycle. Fragments must be hosted by an activity or another fragment. Fragments introduce modularity and reusability into the activity\u2019s UI. Fragments also have their own lifecycle which is dependent on the activity component\u2019s lifecycle. Lifecycle of Android Fragment. %20User%20Interface%20Layout%20(4)(1%205)%202ae3f31480ea426c96089027fe2159d8/Untitled.png). Comparison of features of UI components (advangates vs disadvantages) \ud83d\udd0d: Using fragments makes reusability easy inside activities. Activities are good places to put global elements around your app\u2019s UI such as a navigation drawer. Fragments however are better suited for defining and managing the UI of a single screen or portion of a screen.",
        "questions_answers": [
            {
                "question": "What is a fragment that defines and manages its own layout and has its own lifecycle?",
                "answer": {
                    "score": 0.2924855947494507,
                    "start": 316,
                    "end": 332,
                    "answer": "Android Fragment"
                }
            },
            {
                "question": "What is the lifecycle of Android Fragment?",
                "answer": {
                    "score": 0.22003620862960815,
                    "start": 334,
                    "end": 365,
                    "answer": "%20User%20Interface%20Layout%20"
                }
            },
            {
                "question": "Using fragments makes reusability easy inside what?",
                "answer": {
                    "score": 0.7039565443992615,
                    "start": 545,
                    "end": 555,
                    "answer": "activities"
                }
            }
        ]
    },
    {
        "context": "Sharing data between UI components: There are many ways to share data between UI components: shared preferences, intents, database locally or database remotely. For small amounts of data, intents are the best. Singleton object \u2190 not good. Intents. Intents describe an operation to be performed. It can be used together with. startActivity() method where you can send data between activities. BroadcastIntent: to send it to any interested BroadcastReceiver component. Context.startService and Context.bindService to communicate with a background service. An intent can facilitate runtime binding between the code in different applications. Elements of an intent. Action \u2192 action to be performed: view, edit & main.",
        "questions_answers": [
            {
                "question": "What are the best ways to share data between UI components?",
                "answer": {
                    "score": 0.7196066379547119,
                    "start": 93,
                    "end": 159,
                    "answer": "shared preferences, intents, database locally or database remotely"
                }
            },
            {
                "question": "What is a singleton object  not good?",
                "answer": {
                    "score": 0.4600348472595215,
                    "start": 239,
                    "end": 255,
                    "answer": "Intents. Intents"
                }
            },
            {
                "question": "Intents describe an operation to be performed?",
                "answer": {
                    "score": 0.11187312752008438,
                    "start": 239,
                    "end": 255,
                    "answer": "Intents. Intents"
                }
            },
            {
                "question": "How can an intent facilitate runtime binding between the code in different applications?",
                "answer": {
                    "score": 0.36272138357162476,
                    "start": 515,
                    "end": 552,
                    "answer": "communicate with a background service"
                }
            }
        ]
    },
    {
        "context": "Data \u2192. There are diffferent ways of sharing data between UI components. There\u2019s the obvious with regards to storing the necessary information in a global database. Another approach is to have a ViewModel that wraps around different Fragments. Through the ViewModel there\u2019s an option to share data between the different fragments inside an activity. PASSING DATA BETWEEN ACTIVITIES - Android Fundamentals. Intent: Slide 3. A object the components can use to communicate with the OS. Explicit intents. Used in the context of my app, where internal components are started. Implicit intents. Start components in other apps (camera, calendar etc).",
        "questions_answers": [
            {
                "question": "What are diffferent ways of sharing data between UI components?",
                "answer": {
                    "score": 0.6491797566413879,
                    "start": 0,
                    "end": 6,
                    "answer": "Data \u2192"
                }
            },
            {
                "question": "What is the obvious with regards to storing the necessary information in a global database?",
                "answer": {
                    "score": 0.3502753973007202,
                    "start": 0,
                    "end": 6,
                    "answer": "Data \u2192"
                }
            },
            {
                "question": "How can a ViewModel wrap around different Fragments?",
                "answer": {
                    "score": 0.16562917828559875,
                    "start": 274,
                    "end": 348,
                    "answer": "an option to share data between the different fragments inside an activity"
                }
            }
        ]
    },
    {
        "context": "ViewModel. ViewModel Explained - Android Architecture Component Tutorial. ViewModel Overview Android Developers. A class designed to store and manage UI-related data in a lifecycle friendly way \u2192 it allows data to survive configuration changes such as screen rotation. For simple data that needs to persist, we have use onSaveInstanceState() method and restore it in the onCreate() bundle. \u2190 good only for small amounts of data that can be serialized. Not for large amounts of data. Another problem: UI controllers can have to make asynchronous calls \ud83d\udd0d. Sharing data between fragments. The use of App resources: App resources overview Android Developers.",
        "questions_answers": [
            {
                "question": "What is a class designed to store and manage UI-related data in a lifecycle friendly way?",
                "answer": {
                    "score": 0.6385568976402283,
                    "start": 0,
                    "end": 9,
                    "answer": "ViewModel"
                }
            },
            {
                "question": "What is the onSaveInstanceState() method used for?",
                "answer": {
                    "score": 0.2225419580936432,
                    "start": 353,
                    "end": 388,
                    "answer": "restore it in the onCreate() bundle"
                }
            },
            {
                "question": "How can UI controllers have to make asynchronous calls?",
                "answer": {
                    "score": 0.528838038444519,
                    "start": 554,
                    "end": 584,
                    "answer": "Sharing data between fragments"
                }
            }
        ]
    },
    {
        "context": "Files and additional static content that my app\u2019s code can use such as bitmaps, layout definitions, user interface strings etc. Based on XML layout format. Resources should be externalized from the code so that they can be maintained independently. They should also be grouped together so that they are easier to maintain. Externalized resources can be accessed in the code through their id which is being stored in the apps R class which is accessible in the source code. Typical resource grouping. MyProject. src \u2192 activity.kt. res. drawable \u2192 graphics. layout \u2192. mipmap \u2192 icons. values \u2192 string, colors.",
        "questions_answers": [
            {
                "question": "What is the name of a file that my app can use?",
                "answer": {
                    "score": 0.4114452600479126,
                    "start": 71,
                    "end": 122,
                    "answer": "bitmaps, layout definitions, user interface strings"
                }
            },
            {
                "question": "What should resources be externalized from the code so that they can be maintained independently?",
                "answer": {
                    "score": 0.7249510288238525,
                    "start": 269,
                    "end": 285,
                    "answer": "grouped together"
                }
            },
            {
                "question": "How can externalized resources be accessed in the code through their id which is being stored in the apps R class which is accessible in what?",
                "answer": {
                    "score": 0.466290146112442,
                    "start": 460,
                    "end": 471,
                    "answer": "source code"
                }
            }
        ]
    },
    {
        "context": "Slide 3. Color resources. Gets defined in: res/values/colors.xml. Specified in RGB. Inside resource tag, are the color tags. String resources. 3 string types: 1) string, 2) string array & 3) quantity string. Syntax based on XML. Style resources. Layout resources. Android Manifest file\u2019s role \ud83d\udd0d: The Manifest file is a file where the developer can define the different activities that should be available in the app aswell as which broadcast receivers it should listen to \ud83d\udd0d. Slide 3: Configuration file for app project. Describes essential information about the app to the Android build tools, Android OS and Google Play.",
        "questions_answers": [
            {
                "question": "What is the name of a Manifest file?",
                "answer": {
                    "score": 0.4017461836338043,
                    "start": 264,
                    "end": 271,
                    "answer": "Android"
                }
            },
            {
                "question": "What is a file where the developer can define the different activities that should be available in the app as well as which broadcast receiver it should listen to?",
                "answer": {
                    "score": 0.2525653839111328,
                    "start": 300,
                    "end": 313,
                    "answer": "Manifest file"
                }
            }
        ]
    },
    {
        "context": "Contains. Package name. Components \u2192 activities, services, broadcast receivers & content providers. Permissions \u2192 set permission to access content in the app. Requirements \u2192 requirements of the hardware and software. An app\u2019s activity has a context. Shared preferences: data persistency in an activi. My project: Sebastian. Activity is bound to ViewModel. Recycler: More options for layouts \u2192 grid & staggered. Must have a ViewHolder. Disposition: App lifecycle. Rotation. UI. Material Design. Sharing data. Shared preferences. You can create it and store it locally and access it through other activites \u2192 not good approach. Good for small amount of data.",
        "questions_answers": [
            {
                "question": "What is the name of the package name?",
                "answer": {
                    "score": 0.37303030490875244,
                    "start": 24,
                    "end": 98,
                    "answer": "Components \u2192 activities, services, broadcast receivers & content providers"
                }
            },
            {
                "question": "What is an app's activity bound to?",
                "answer": {
                    "score": 0.9824919700622559,
                    "start": 345,
                    "end": 354,
                    "answer": "ViewModel"
                }
            },
            {
                "question": "How does an activity have a context?",
                "answer": {
                    "score": 0.11603310704231262,
                    "start": 217,
                    "end": 225,
                    "answer": "An app\u2019s"
                }
            },
            {
                "question": "What is a UI?",
                "answer": {
                    "score": 0.5949572324752808,
                    "start": 477,
                    "end": 492,
                    "answer": "Material Design"
                }
            }
        ]
    },
    {
        "context": "Intent. Singleton. list vs recycler. Resources. Manifest. Own usage. Questions: Can an android View element exist without an ID. No: some things shouldn\u2019t be accessed and manipulated in the Kotlin code and thus doesn\u2019t need an ID. What are the different layout types that exist: Linear Layout. Relative Layout. Web layout. %20User%20Interface%20Layout%20(4)(1%205)%202ae3f31480ea426c96089027fe2159d8/Untitled%201.png). With adapter: List View. Grid View..",
        "questions_answers": [
            {
                "question": "What are the different layout types that exist: Linear Layout. Relative Layout?",
                "answer": {
                    "score": 0.3741859197616577,
                    "start": 311,
                    "end": 321,
                    "answer": "Web layout"
                }
            },
            {
                "question": "What is %20User%20Interface%20(4)(1%205)%202ae3f31480ea426c96089027fe2159d8/Untitled%201?",
                "answer": {
                    "score": 0.9573796391487122,
                    "start": 343,
                    "end": 351,
                    "answer": "20Layout"
                }
            }
        ]
    }
]