[{"context": "How to build UI interface: A layout defines the structure of the UI of an app such as in an activity. All elements in a layout are build using a hierarchy of View and ViewGroup objects. View: draws something on the screen \u2192 Buttons, Text, Image. ViewGroup: invisible container that defines the structure for views and other ViewGroups \u2192 LinearLayout, ConstraintLayout. Two ways of building UI\u2019s Declare UI elements in XML Instantiate layout elements at runtime Each layout must have a root element . Loading XML resources. When app compiles \u2192 each XML layout is compiled into a View resource The layout of each activity should be loaded on the onCreate() lifecycle event in the setContentView() method \ud83d\udd0d .", "questions_answers": [{"question": "How to build UI interface: What defines the structure of the UI of an app?", "answer": {"score": 0.8478989601135254, "start": 27, "end": 35, "answer": "A layout"}}, {"question": "How many ways of building UI\u2019s Declare UI elements in XML Instantiate layout elements at runtime?", "answer": {"score": 0.8937335014343262, "start": 369, "end": 372, "answer": "Two"}}, {"question": "What is a hierarchy of View and ViewGroup objects built in a layout?", "answer": {"score": 0.8494436740875244, "start": 13, "end": 25, "answer": "UI interface"}}, {"question": "What is the invisible container that defines a structure for views and other ViewGroups?", "answer": {"score": 0.930265486240387, "start": 246, "end": 255, "answer": "ViewGroup"}}]}, {"context": "Attributes. UI elements\u2019s design are defined through attributes which are key-value properties Each View object can have an integer \u2192 but doesn\u2019t have to Each element can be found through their ID in the Activity class through the findViewById method . There are two ways you can build UI interfaces for android app. The primary way is through building the XML files in the resources folder. Here you can define what elements shall be contained within the distinct files that can represent Activities and also Fragments. If there\u2019s a TextField the content of the input field can be defined in the strings.", "questions_answers": [{"question": "What is UI elements\u2019 design defined through attributes which are key-value properties What is an integer  but doesn\u2019t have to Each View object can be found through their ID in the Activity class through the findViewById method?", "answer": {"score": 0.649752676486969, "start": 95, "end": 133, "answer": "Each View object can have an integer \u2192"}}, {"question": "What is the primary way you can build UI interfaces for android app?", "answer": {"score": 0.738286018371582, "start": 344, "end": 390, "answer": "building the XML files in the resources folder"}}]}, {"context": "xml file inside resources, where the value is defined and thus standardized instead of containing it in each activity and fragment file. Lifecycle of app: The Activity component of an app which displays a UI has different lifecycle methods. These methods can be overwritten and thus we can modify their behaviour and trigger our own custom methods as needed. Lifecycle of Android Activity onCreate() onStart() onResume() App is running with activity shown onPause() onStop() onDestroy() . Fragments are resusable portions of an app\u2019s UI. A fragment defines and manages its own layout and has its own lifecycle. Fragments must be hosted by an activity or another fragment.", "questions_answers": [{"question": "What is the value of xml file inside resources?", "answer": {"score": 0.2494804710149765, "start": 63, "end": 75, "answer": "standardized"}}, {"question": "What does the Activity component of an app display a UI have different lifecycle methods?", "answer": {"score": 0.34889209270477295, "start": 489, "end": 498, "answer": "Fragments"}}, {"question": "How can we modify their behaviour and trigger our own custom methods as needed?", "answer": {"score": 0.913153886795044, "start": 262, "end": 273, "answer": "overwritten"}}, {"question": "What is an activity shown onCreate() onStart() onResume()?", "answer": {"score": 0.1729433834552765, "start": 359, "end": 379, "answer": "Lifecycle of Android"}}]}, {"context": "Fragments introduce modularity and reusability into the activity\u2019s UI. Fragments also have their own lifecycle which is dependent on the activity component\u2019s lifecycle. Lifecycle of Android Fragment %20User%20Interface%20Layout%20(4)(1%205)%202ae3f31480ea426c96089027fe2159d8/Untitled.png) . Comparison of features of UI components (advangates vs disadvantages) \ud83d\udd0d: Using fragments makes reusability easy inside activities. Activities are good places to put global elements around your app\u2019s UI such as a navigation drawer. Fragments however are better suited for defining and managing the UI of a single screen or portion of a screen. Sharing data between UI components: There are many ways to share data between UI components: shared preferences, intents, database locally or database remotely.", "questions_answers": [{"question": "What is the lifecycle of the Android Fragment %20User%20Interface%20(4)(1%205)%202ae3f31480ea426c96089027fe2159d8/Untitled.png) What is a good place to put global elements around your app\u2019s UI?", "answer": {"score": 0.3649417757987976, "start": 219, "end": 230, "answer": "20Layout%20"}}, {"question": "What are many ways to share data between UI components?", "answer": {"score": 0.8627253770828247, "start": 728, "end": 794, "answer": "shared preferences, intents, database locally or database remotely"}}]}, {"context": "For small amounts of data, intents are the best. Singleton object \u2190 not good. Intents ```kotlin // MainActivity.kt Intent intent = new Intent(MainActivity.this, SecondScreen::class.java); // Attaching data to the intent // key-value pair intent.putExtra(\"name\", \"philip\") intent.putExtra(\"age\", 25) startActivity(intent); // will navigate to the screen // SecondScreen.kt Intent incomingIntent = getIntent(); // Intercepts any intent coming to the activity String incomingName = incomingIntent.getStringExtra(\"name\"); ``` . Intents describe an operation to be performed. It can be used together with . startActivity() method where you can send data between activities. BroadcastIntent: to send it to any interested BroadcastReceiver component Context.startService and Context.", "questions_answers": [{"question": "Intents are the best for small amounts of data?", "answer": {"score": 0.21060273051261902, "start": 27, "end": 48, "answer": "intents are the best."}}, {"question": "What type of object is not good for a singleton object?", "answer": {"score": 0.34729498624801636, "start": 49, "end": 65, "answer": "Singleton object"}}, {"question": "Intent intent = new Intent(MainActivity.this, SecondScreen::class.java); // Attaching data to the intent // key-value pair intent.putExtra(\"age\", 25) startActivity(intent); // will navigate to the screen // Secondscreen.kt In", "answer": {"score": 0.3201664388179779, "start": 112, "end": 114, "answer": "kt"}}]}, {"context": "bindService to communicate with a background service . An intent can facilitate runtime binding between the code in different applications. Elements of an intent Action \u2192 action to be performed: view, edit & main Data \u2192 . There are diffferent ways of sharing data between UI components. There\u2019s the obvious with regards to storing the necessary information in a global database. Another approach is to have a ViewModel that wraps around different Fragments. Through the ViewModel there\u2019s an option to share data between the different fragments inside an activity. PASSING DATA BETWEEN ACTIVITIES - Android Fundamentals. Intent: Slide 3.", "questions_answers": [{"question": "How can an intent facilitate runtime binding between the code in different applications?", "answer": {"score": 0.43876007199287415, "start": 0, "end": 52, "answer": "bindService to communicate with a background service"}}, {"question": "What is the obvious with regards to storing the necessary information in a global database?", "answer": {"score": 0.06388995796442032, "start": 140, "end": 193, "answer": "Elements of an intent Action \u2192 action to be performed"}}, {"question": "What is a way to share data between different fragments inside an activity?", "answer": {"score": 0.31687429547309875, "start": 409, "end": 418, "answer": "ViewModel"}}]}, {"context": "A object the components can use to communicate with the OS Explicit intents Used in the context of my app, where internal components are started Implicit intents Start components in other apps (camera, calendar etc) . ViewModel. ViewModel Explained - Android Architecture Component | Tutorial. ViewModel Overview | Android Developers. A class designed to store and manage UI-related data in a lifecycle friendly way \u2192 it allows data to survive configuration changes such as screen rotation. For simple data that needs to persist, we have use onSaveInstanceState() method and restore it in the onCreate() bundle. \u2190 good only for small amounts of data that can be serialized.", "questions_answers": [{"question": "What is a class designed to store and manage UI-related data in a lifecycle friendly way?", "answer": {"score": 0.39655640721321106, "start": 218, "end": 227, "answer": "ViewModel"}}, {"question": "What is the onSaveInstanceState() method used to restore data in the onCreate() bundle?", "answer": {"score": 0.32348671555519104, "start": 495, "end": 528, "answer": "simple data that needs to persist"}}]}, {"context": "Not for large amounts of data. . Another problem: UI controllers can have to make asynchronous calls\u2026 \ud83d\udd0d. Sharing data between fragments. The use of App resources: App resources overview | Android Developers. Files and additional static content that my app\u2019s code can use such as bitmaps, layout definitions, user interface strings etc. Based on XML layout format. Resources should be externalized from the code so that they can be maintained independently. They should also be grouped together so that they are easier to maintain. Externalized resources can be accessed in the code through their id which is being stored in the apps R class which is accessible in the source code Typical resource grouping MyProject src \u2192 activity.", "questions_answers": [{"question": "What can UI controllers have to make asynchronous calls?", "answer": {"score": 0.9378204345703125, "start": 105, "end": 135, "answer": "Sharing data between fragments"}}, {"question": "How can I access externalized resources from the code?", "answer": {"score": 0.3698420822620392, "start": 582, "end": 598, "answer": "through their id"}}, {"question": "What can be used to share data between fragments?", "answer": {"score": 0.28460121154785156, "start": 50, "end": 100, "answer": "UI controllers can have to make asynchronous calls"}}, {"question": "What can I use to share content?", "answer": {"score": 0.38386964797973633, "start": 148, "end": 161, "answer": "App resources"}}]}, {"context": "kt res drawable \u2192 graphics layout \u2192 mipmap \u2192 icons values \u2192 string, colors . Slide 3. Color resources Gets defined in: res/values/colors.xml Specified in RGB Inside resource tag, are the color tags String resources 3 string types: 1) string, 2) string array & 3) quantity string Syntax based on XML Style resources Layout resources . Android Manifest file\u2019s role \ud83d\udd0d: The Manifest file is a file where the developer can define the different activities that should be available in the app aswell as which broadcast receivers it should listen to \ud83d\udd0d. Slide 3: Configuration file for app project Describes essential information about the app to the Android build tools, Android OS and Google Play Contains Package name Components \u2192 activities, services, broadcast receivers & content providers Permissions \u2192 set permission to access content in the app Requirements \u2192 requirements of the hardware and software .", "questions_answers": [{"question": "What is the color tag Specified in RGB Inside resource tag, are the color tags String resources 3 string types: 1) string, 2) string array & 3) quantity string Syntax based on XML Style resources Layout resources. Slide 3: Configuration file for app project Describes essential information about the app to the Android build tools, Android OS and Google Play Contains Package name Components  activities, services, broadcast receivers & content providers", "answer": {"score": 0.1500256210565567, "start": 137, "end": 140, "answer": "xml"}}]}, {"context": "An app\u2019s activity has a context. Shared preferences: data persistency in an activi . My project: Sebastian Activity is bound to ViewModel Recycler: More options for layouts \u2192 grid & staggered Must have a ViewHolder . Disposition: App lifecycle Rotation UI Material Design Sharing data Shared preferences You can create it and store it locally and access it through other activites \u2192 not good approach Good for small amount of data Intent Singleton list vs recycler Resources Manifest Own usage . Questions: Can an android View element exist without an ID No: some things shouldn\u2019t be accessed and manipulated in the Kotlin code and thus doesn\u2019t need an ID What are the different layout types that exist? Linear Layout Relative Layout Web layout %20User%20Interface%20Layout%20(4)(1%205)%202ae3f31480ea426c96089027fe2159d8/Untitled%201.", "questions_answers": [{"question": "What is an app\u2019s activity bound to?", "answer": {"score": 0.7288086414337158, "start": 128, "end": 146, "answer": "ViewModel Recycler"}}, {"question": "What does Sebastian Activity have a ViewHolder?", "answer": {"score": 0.3641963303089142, "start": 148, "end": 191, "answer": "More options for layouts \u2192 grid & staggered"}}, {"question": "How can an android View element exist without an ID?", "answer": {"score": 0.5658080577850342, "start": 559, "end": 627, "answer": "some things shouldn\u2019t be accessed and manipulated in the Kotlin code"}}, {"question": "What is a Linear Layout Relative Layout Web layout?", "answer": {"score": 0.6115215420722961, "start": 745, "end": 752, "answer": "%20User"}}]}, {"context": "png) With adapter: List View Grid View ..", "questions_answers": [{"question": "What is png) With adapter: List View Grid View..", "answer": {"score": 0.35988089442253113, "start": 19, "end": 38, "answer": "List View Grid View"}}]}]