[{"context": "Android Development Android Components Activities Represents a single screen with a user interface, in-short Activity performs actions on the screen and answer to the events on the UI components. Services A service is a component that runs in the application background to perform long-running operations. User services: when the user starts a service, the app tells App services Broadcast Receivers Broadcast Receivers simply respond to broadcast messages from other application or from the Android operating system. Content Providers A content provider component supplies data from one application to others on request. Introduction to Kotlin tirsdag 8. februar Variable: Var indicates that you want to declare a new variable.", "questions_answers": [{"question": "What is a component that runs in the application background to perform long-running operations?", "answer": {"score": 0.984941840171814, "start": 196, "end": 214, "answer": "Services A service"}}, {"question": "What is the name of a service that is used in the app background?", "answer": {"score": 0.05799558758735657, "start": 196, "end": 214, "answer": "Services A service"}}, {"question": "What does a content provider component supply data from one application to others on request?", "answer": {"score": 0.07484911382198334, "start": 438, "end": 516, "answer": "broadcast messages from other application or from the Android operating system"}}]}, {"context": "Read-only variable: Val indicates a new immutable variable, a constant. App Resources and Basic UI tirsdag 15. februar Android App Manifest Package name: Determine the location of code entities when building your project Permissions: Set permissions to access content from the app, e.g. access contacts in WhatsApp. Components: Information about activities, services, broadcast receivers and content providers. Requirements: Requirements of software and hardware Color and style in res folder. Intent class Explicit Intents - Used in the context of your application, in which you can start internal components. You define what will happen when you do something, mapping activity.", "questions_answers": [{"question": "What is a constant variable that indicates a new immutable variable?", "answer": {"score": 0.9448847770690918, "start": 20, "end": 23, "answer": "Val"}}, {"question": "What is the name of the Android App Manifest Package?", "answer": {"score": 0.9878771901130676, "start": 111, "end": 118, "answer": "februar"}}, {"question": "What are the requirements for software and hardware Color and style in res folder?", "answer": {"score": 0.09830521792173386, "start": 316, "end": 409, "answer": "Components: Information about activities, services, broadcast receivers and content providers"}}]}, {"context": "You explicitly state what you want. Implicit Intents E.g I want to take a photo. You can say \u201cI want to send a mail\u201d, then it can be suggested that you want to open the mail app, but you don\u2019t explicitly say what you want the phone to do, you imply it.\u00a0Aim to start a component in another application. More in lecture 9 Android Jetpack Suite of Android libraries to reduce boilerplate code, like lifecycle management, background tasks. Reduce complexity with libraries that work consistently across Android versions and devices. By lazy, means I will only instantiate this if I use it, or else it doesn\u2019t exist.", "questions_answers": [{"question": "What can be suggested that you want to open a mail app?", "answer": {"score": 0.038252703845500946, "start": 183, "end": 237, "answer": "you don\u2019t explicitly say what you want the phone to do"}}, {"question": "What is the name of a component in a new application?", "answer": {"score": 0.1665395200252533, "start": 222, "end": 231, "answer": "the phone"}}, {"question": "How can I reduce complexity with libraries that work consistently across Android versions and devices?", "answer": {"score": 0.20867988467216492, "start": 328, "end": 335, "answer": "Jetpack"}}]}, {"context": "Share objects/data between activities with intent. Material design and fragments tirsdag 22. februar One critical difference between the fragment lifecycle and the activity lifecycle is that fragment lifecycle functions are called by the FragmentManager of the hosting activity, not the OS. The OS knows nothing about the fragments that an activity is using to manage things. Fragments are the activity\u2019s internal business. The onAttach(Context?), onCreate(Bundle?), onCreateView(...), and onViewCreated(...) functions are called when you add the fragment to the FragmentManager. Difference between activity and fragment? Activity has three steps: Java/Kotlin class file, XML layout and add to manifest Fragments do not need to be added in the manifest, only two files, namely: Java/Kotlin class file and XML layout.", "questions_answers": [{"question": "What is the difference between the fragment lifecycle and the activity lifecycle?", "answer": {"score": 0.45172950625419617, "start": 191, "end": 277, "answer": "fragment lifecycle functions are called by the FragmentManager of the hosting activity"}}, {"question": "How many files do the Java/Kotlin class file and add to manifest Fragments do not need to be added in?", "answer": {"score": 0.6180360913276672, "start": 759, "end": 762, "answer": "two"}}, {"question": "What does the FragmentManager know about the fragments that an activity is using to manage things?", "answer": {"score": 0.751065194606781, "start": 291, "end": 311, "answer": "The OS knows nothing"}}, {"question": "What is a key difference between activity and fragment?", "answer": {"score": 0.43817928433418274, "start": 191, "end": 277, "answer": "fragment lifecycle functions are called by the FragmentManager of the hosting activity"}}]}, {"context": "On rotate, update savedInstanceState to resume to where you were on the screen. ViewHolder is not mandatory with list view, but it is the best way to do it, also with performance. But with recycle view, it is necessary with a view holder. RecyclerView library must be added as a dependency library in your project. Slide #5 page 5. Views use ViewHolders and Adapters to select a small sample form a large data set. It only provides a limited number of the items that can be shown in the screen. Flexible Data View and Thread RecyclerView vs ListView When an item scrolls off the screen, RecyclerView doesn\u2019t destroy its view.", "questions_answers": [{"question": "What is the best way to do ViewHolder?", "answer": {"score": 0.7629830241203308, "start": 167, "end": 178, "answer": "performance"}}, {"question": "What is a dependency library in your project?", "answer": {"score": 0.8093308806419373, "start": 239, "end": 259, "answer": "RecyclerView library"}}, {"question": "How many items can be shown in the screen?", "answer": {"score": 0.7364073991775513, "start": 432, "end": 448, "answer": "a limited number"}}, {"question": "When an item scrolls off the screen, RecyclerView doesn\u2019t destroy its view?", "answer": {"score": 0.7748845219612122, "start": 495, "end": 549, "answer": "Flexible Data View and Thread RecyclerView vs ListView"}}]}, {"context": "RecyclerView adapter forces the developer to use the ViewHolder pattern. LayoutManager allows us to choose that we want to show the row views and how to scroll. Notifying Adapter Recycle - View\u2019s adapter provides a set of notifiers to react while the data are binding to the view If your application requires an operation that does not return an immediate result, you must perform this operation in a separated thread know as worker thread. Android provides the following threads components: Android Thread: A block of code responsible to execute a set of tasks in your application Kotlin Coroutines: Kotlin coroutines provide an api that enables you to write asynchronous code.", "questions_answers": [{"question": "How does the RecyclerView adapter force the developer to use the ViewHolder pattern?", "answer": {"score": 0.24242132902145386, "start": 73, "end": 86, "answer": "LayoutManager"}}, {"question": "How do View\u2019s adapter react while the data are binding to the view?", "answer": {"score": 0.13354268670082092, "start": 222, "end": 231, "answer": "notifiers"}}, {"question": "What is a block of code responsible to execute a set of tasks in your application?", "answer": {"score": 0.7556837201118469, "start": 492, "end": 506, "answer": "Android Thread"}}]}, {"context": "Android handler: It allows you to send and process \"messages\" and \"runnable objects\u201d Download data from the internet, slide 54. Set on the manifest. You only need to ask for permission once. When to use async? When you don\u2019t have control over how much time something takes. Android services: Activites Services:A Service is an Android component that can perform long-running operations in the background. Once started, a service might continue running for some time, even after the user switches to another application Local tests: Execute on your development machine or a server, so they\u2019re also called host-side tests.", "questions_answers": [{"question": "What is an Android handler that allows you to send and process \"messages\" and \"runnable objects\"?", "answer": {"score": 0.2180705964565277, "start": 292, "end": 310, "answer": "Activites Services"}}, {"question": "What is a service that can perform long-running operations in the background?", "answer": {"score": 0.4545004367828369, "start": 292, "end": 301, "answer": "Activites"}}, {"question": "What is the name of the service that is called?", "answer": {"score": 0.5716643929481506, "start": 292, "end": 301, "answer": "Activites"}}]}, {"context": "Instrumented tests: Execute on an Android device (phone, smartwatch, tablet), either physical or emulated. Internal vs external memory: External example: Micro SD card, removable storage medium. GPS The satellite sends you a very precise timestamp.You need at least three satellites to provide a precise location. Android sensors: Motion sensors Environmental sensors Position sensors Exam Practice The Android application lifecycle; One critical difference between the fragment lifecycle and the activity lifecycle is that fragment lifecycle functions are called by the FragmentManager of the hosting activity, not the OS. The OS knows nothing about the fragments that an activity is using to manage things.", "questions_answers": [{"question": "What is an example of an Android device that sends you a very precise timestamp?", "answer": {"score": 0.7265603542327881, "start": 195, "end": 198, "answer": "GPS"}}, {"question": "What is a critical difference between the fragment lifecycle and the activity lifecycle?", "answer": {"score": 0.1910856068134308, "start": 524, "end": 610, "answer": "fragment lifecycle functions are called by the FragmentManager of the hosting activity"}}, {"question": "What is the FragmentManager of the hosting activity?", "answer": {"score": 0.20899315178394318, "start": 524, "end": 552, "answer": "fragment lifecycle functions"}}]}, {"context": "Fragments are the activity\u2019s internal business. The onAttach(Context?), onCreate(Bundle?), onCreateView(...), and onViewCreated(...) functions are called when you add the fragment to the FragmentManager. Activity State Diagram Every instance of an activity has a lifecycle. During the lifecycle, the activity transitions between four states: resumed, paused, stopped and nonexistent. For each transaction, there is an Activity function that notifies the activity of changes of the state. The nonexistent state represents an activity that has not been launched yet, or an activity that was just destroyed (for example by the user pressing the back button). For that reason this state is sometimes referred to as the destroyed state.", "questions_answers": [{"question": "What are the functions called when you add the fragment to the FragmentManager?", "answer": {"score": 0.24751873314380646, "start": 114, "end": 127, "answer": "onViewCreated"}}, {"question": "What is the name of the activity that is referred to as the destroyed state?", "answer": {"score": 0.43204620480537415, "start": 492, "end": 509, "answer": "nonexistent state"}}]}, {"context": "There is no instance in memory, and there is no associated view for the user to see or interact with. Stopped\u00a0represents an activity that has an instance in memory, but whose view is not visible on the screen. This state occurs in passing when the activity is first spinning up, and re-occurs any time the view is fully occluded (such as when the user launches another full-screen activity to the foreground, presses the home button, or uses the overview screen to switch tasks). Paused represents an activity that is not active in the foreground, but whose view is visible or partially visible.", "questions_answers": [{"question": "What is an activity that has an instance in memory, but whose view is not visible on the screen?", "answer": {"score": 0.9070957899093628, "start": 102, "end": 109, "answer": "Stopped"}}, {"question": "What state occurs when the activity is first spinning up, and re-occurs any time the view is fully occluded?", "answer": {"score": 0.8695574998855591, "start": 102, "end": 109, "answer": "Stopped"}}, {"question": "When is Paused a activity that is not active in the foreground?", "answer": {"score": 0.3204898238182068, "start": 231, "end": 277, "answer": "passing when the activity is first spinning up"}}]}, {"context": "An activity would be partially visible, for example if the user launched a new dialog-themed or transparent activity on top of it. An activity could also be fully visible but not in the foreground if the user is viewing two activities in multi window mode (also called \u201csplit screen mode\u201d). Resumed\u00a0represents an activity that is in memory, fully visible and in the foreground. It is the activity the user is currently interacting with. Only one activity across the entire system can be in the resumed state at any given time. That means that if one activity is moving into the resumed state, another is likely moving out of the resumed state.", "questions_answers": [{"question": "What is an activity that is in memory, fully visible and in the foreground?", "answer": {"score": 0.975297212600708, "start": 291, "end": 298, "answer": "Resumed"}}, {"question": "What is the activity that the user is currently interacting with?", "answer": {"score": 0.9729215502738953, "start": 291, "end": 298, "answer": "Resumed"}}, {"question": "How many activities can be in the resumed state at any given time?", "answer": {"score": 0.48826804757118225, "start": 437, "end": 445, "answer": "Only one"}}]}, {"context": "Subclasses of Activity can take advantage of the functions named in the figure, to get work done at critical transitions in the activity\u2019s lifecycle. These functions are often called lifecycle callbacks. You are already acquaninted with one of these lifecycle callback functions -onCreate(Bundle?). The OS calls this function after the activity instance is created but before it is put onscreen. An activity usually overrides the increase to prepare the UI (inflating the layout, setContentView, listeners etc.) When you finish an activity, onPause, onStop and then onDestroy is called. Pressing the back button destroys the activity and starts a new one.", "questions_answers": [{"question": "What can subclasses of Activity use to get work done at critical transitions in the activity\u2019s lifecycle?", "answer": {"score": 0.4191153049468994, "start": 49, "end": 78, "answer": "functions named in the figure"}}, {"question": "What is one of the lifecycle callback functions called after the activity instance is created but before it is put onscreen?", "answer": {"score": 0.8608060479164124, "start": 280, "end": 288, "answer": "onCreate"}}, {"question": "When is onPause, onStop and onDestroy called?", "answer": {"score": 0.8967652916908264, "start": 512, "end": 539, "answer": "When you finish an activity"}}]}, {"context": "Rotating your device changes the device configuration. The device configuration is a set of characteristics that describe the current state of an individual device. When. Runtime configuration change occurs, there may be resources that ar a better match for the new configuration. So Android destroys the activity and looks for resources that are the best fit for the new configurations and then rebuilds a new instance of the activity with those resources. Fragment Lifecycle and Fragment Manager. The FragmentManager is a part of the activity class. It handles two things: a list of fragments and a back stack of fragment transactions.", "questions_answers": [{"question": "What is a set of characteristics that describe the current state of an individual device?", "answer": {"score": 0.5413321256637573, "start": 55, "end": 79, "answer": "The device configuration"}}, {"question": "What happens when a runtime configuration change occurs?", "answer": {"score": 0.6396077871322632, "start": 208, "end": 279, "answer": "there may be resources that ar a better match for the new configuration"}}, {"question": "When does Android destroy the activity and looks for resources that are the best fit for the new configurations?", "answer": {"score": 0.39838898181915283, "start": 171, "end": 206, "answer": "Runtime configuration change occurs"}}, {"question": "What is the FragmentManager?", "answer": {"score": 0.7337232232093811, "start": 522, "end": 550, "answer": "a part of the activity class"}}]}, {"context": "It is responsible for adding the fragments\u2019 views to the activity\u2019s view hierarchy and driving the fragments lifecycles. Fragmentmanager is good when you have multiple fragments in one activity. To add a fragment to an activity in code, you make explicit calls to the activity\u2019s FragmentManager. You can access the activity\u2019s fragment manager using supportFragmentManager. The FragmentManager maintains a back stack of fragment transactions that you can navigate. Diagram of the Fragment Lifecycle. The Fragment lifecycle is similar to the activity lifecycle. It has stopped, paused and resumed states, and you can override them to get things done at critical points.", "questions_answers": [{"question": "What is responsible for adding the fragments\u2019 views to the activity\u2019s view hierarchy?", "answer": {"score": 0.9166205525398254, "start": 121, "end": 136, "answer": "Fragmentmanager"}}, {"question": "What is the structure of the Fragment Lifecycle?", "answer": {"score": 0.9280179738998413, "start": 464, "end": 471, "answer": "Diagram"}}]}, {"context": "A fragment works on behalf of an activity, so its state should reflect the activity\u2019s state. Thus it need corresponding lifecycle functions to handle the activity\u2019s work. A critical difference between the fragment lifecycle and the activity lifecycle is that fragment lifecycle functions are called by the FragmentManager of the hosting activity, not the OS. The OS knows nothing about the fragments that an activity is using to manage things. Fragments are the activity\u2019s internal business. OnActivityCreated is called after the hosting activity\u2019s onCreate has been executed. What happens if you add a fragment while the activity is already resumed? In that case, the FragmentManager immediately walks the fragment through whatever steps are necessary to get it caught up to the activity\u2019s state.", "questions_answers": [{"question": "What does the FragmentManager call after the hosting activity\u2019s onCreate has been executed?", "answer": {"score": 0.9934116005897522, "start": 492, "end": 509, "answer": "OnActivityCreated"}}, {"question": "What does a fragment work on behalf of an activity?", "answer": {"score": 0.24965383112430573, "start": 46, "end": 91, "answer": "its state should reflect the activity\u2019s state"}}, {"question": "What is the difference between the fragment lifecycle and the activity lifecycle?", "answer": {"score": 0.40732428431510925, "start": 259, "end": 345, "answer": "fragment lifecycle functions are called by the FragmentManager of the hosting activity"}}]}, {"context": "Example it calls onAttach, onCreate, onCreateView etc.. The four different types of Android components, namely: (1) activities, (2) services, (3) broadcast receivers, and (4) content providers; Activities Activity represents a single screen with a UI and it is the entry point for interacting with the user. Example for my app: my app had two activities: loginActivity and ScooterSharingActivity. The ScooterSharingActivity connected to all the other fragments When to use activities and fragments? Fragments are Android's solution to creating reusable user interfaces. You can achieve some of the same things using activities and layouts (for example by using includes).", "questions_answers": [{"question": "What is a single screen with a UI?", "answer": {"score": 0.9565750956535339, "start": 194, "end": 213, "answer": "Activities Activity"}}, {"question": "What are the four different types of Android components?", "answer": {"score": 0.013831427320837975, "start": 175, "end": 192, "answer": "content providers"}}, {"question": "What is the entry point for interacting with the user?", "answer": {"score": 0.6305241584777832, "start": 194, "end": 213, "answer": "Activities Activity"}}]}]